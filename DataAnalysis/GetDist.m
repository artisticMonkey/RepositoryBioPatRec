% ---------------------------- Copyright Notice ---------------------------
% This file is part of BioPatRec ? which is open and free software under
% the GNU Lesser General Public License (LGPL). See the file "LICENSE" for
% the full license governing this code and copyrights.
%
% BioPatRec was initially developed by Max J. Ortiz C. at Integrum AB and
% Chalmers University of Technology. All authors? contributions must be kept
% acknowledged below in the section "Updates % Contributors".
%
% Would you like to contribute to science and sum efforts to improve
% amputees? quality of life? Join this project! or, send your comments to:
% maxo@chalmers.se.
%
% The entire copyright notice must be kept in this or any source file
% linked to BioPatRec. This will ensure communication with all authors and
% acknowledge contributions here and in the project web page (optional).
%
% -------------------------- Function Description -------------------------
% This function recieves dataM and dataC form two movements and returns 
% the distance between the movements according to the statistical 
% similarity measure recieves as def.
% ------------------------- Updates & Contributors ------------------------
% [Contributors are welcome to add their email]
% 2015-09-23 / Niclas Nilsson / Created Feature evaluation
% 20xx-xx-xx / Author  / Comment on update
function dist = GetDist(dataM, dataC, def)
nD = size(dataM,2); %number of dimensions
switch def
    case 'Bhattacharyya'
        % Shown to be highly correlated with MLP accuracy. 
        % Loading dimensionality compensation
        offset = [0.0375092933320304 0.0350908775192012 0.0344557391132259 0.0341853617178979 0.0340559561988352 0.0338058400804062 0.0342175690725045 0.0342361654180084 0.0344012272167238 0.0338540027937894 0.0347644380882016 0.0346022481832413 0.0347115608383520 0.0349790442349207 0.0349558748771835 0.0351395054070965 0.0352946858059050 0.0355503768342382 0.0355567990917960 0.0361529533863166 0.0358768882186641 0.0361220184223233 0.0362885900117221 0.0368055647924384 0.0366521379489276 0.0368995540452034 0.0372718626099225 0.0372129792887146 0.0376266454015315 0.0376225792412812 0.0382602883885979 0.0379917802455130 0.0381847204945589 0.0389249081970735 0.0385598823275204 0.0388640995281928 0.0392366350105331 0.0394619979129820 0.0395959568667019 0.0401143996319806 0.0401067797684935 0.0405078261622909 0.0405140631431638 0.0411882711208129 0.0411726729764033 0.0413707770565512 0.0417280274969853 0.0421221361134021 0.0422468089595587 0.0425381670169491 0.0429695893963782 0.0430298693715894 0.0435676601299853 0.0436653404496794 0.0440709673655344 0.0442575221110602 0.0447778214923296 0.0454962882306176 0.0450490218002635 0.0459629382434290 0.0458532565358971 0.0466047262952882 0.0467815402512981 0.0473467792444122 0.0477690976218832 0.0478607510159321 0.0483045462240388 0.0490938755611063 0.0490216451506735 0.0499894411855761 0.0500167212942269 0.0507490598517895 0.0510688185103652 0.0514937309224846 0.0524817877813013 0.0526651264817168 0.0530668826730465 0.0538346470921298 0.0539396832346428 0.0551772639811277 0.0554254251057458 0.0562197432783975 0.0567161902351505 0.0577751444071772 0.0581492939506645 0.0587970037690946 0.0596930868626799 0.0602718025422733 0.0613527320365810 0.0620627354794343 0.0630552772166566 0.0641226562087924 0.0647297179738207 0.0658621243309208 0.0669314669264738 0.0682421239813369 0.0692803747589696 0.0704461777684964 0.0722237816906732 0.0730254684303757 0.0749435920514010 0.0763393209333421 0.0783846094216267 0.0801488024842607 0.0820581929417061 0.0842486730714089 0.0868293690946906 0.0892353280699663 0.0927950229589536];
        % Calculating value
        tMeans = mean(dataM)-mean(dataC);
        tCov = (cov(dataM)+cov(dataC))./2;
        dist = sqrt(tMeans/tCov*tMeans'./8 + log(det(tCov)/sqrt(det(cov(dataM))*det(cov(dataC))))/2)-sum(offset(1:nD-1));
    case 'Mahalanobis Modified' 
        % Shown to be highly correlated with LDA and SVM accuracy.
        % Loading dimensionality compensation
        offset = [0.0297868572766103 0.0222171546629323 0.0187923583942968 0.0165128313715476 0.0147889031371008 0.0139044729862337 0.0124624701459001 0.0120239026981016 0.0113772841395549 0.0111384727811116 0.0104566654438472 0.00990110574963826 0.00962426426402066 0.00934267132887631 0.00937746293480096 0.00907872919849295 0.00878800984976513 0.00847944762105413 0.00859813022463879 0.00792774265371504 0.00839056859452908 0.00790540261868339 0.00738672103880805 0.00813222234895628 0.00781778785103721 0.00725097053008666 0.00772907328083261 0.00741283508612389 0.00724249458529547 0.00711246836068519 0.00738000099995995 0.00685252032472206 0.00727313507665184 0.00685208168949436 0.00718370712384719 0.00684102428645217 0.00692616132290908 0.00626473943002104 0.00713141809357482 0.00631390752477656 0.00729745862959230 0.00674459467414723 0.00653265003868808 0.00689282941783886 0.00602397839084384 0.00683155865595975 0.00685269661847981 0.00647134624940332 0.00633099211161092 0.00642707413550936 0.00665602960253253 0.00629940368759241 0.00675525899996010 0.00660022228780577 0.00622324867969781 0.00651116165207988 0.00630671366774960 0.00695004255582599 0.00600465696735075 0.00672655691282564 0.00622827879159338 0.00650503931773860 0.00656674456118889 0.00686750177291728 0.00616024645540403 0.00636649109409715 0.00649718166821200 0.00665528768457102 0.00641571726245993 0.00703159869350778 0.00588797724306955 0.00668824348085895 0.00697765439749587 0.00658553648065818 0.00645233398096023 0.00642074637296597 0.00686371508339656 0.00637133027697168 0.00649816649941803 0.00716540973157953 0.00652190264697206 0.00686186341522233 0.00661910786800346 0.00697556853893055 0.00690921358128094 0.00664632475212845 0.00701855993946487 0.00700394808594762 0.00684768997211915 0.00716959624754421 0.00708224876585295 0.00702841336440663 0.00740631534025382 0.00665345872614631 0.00692808241380893 0.00755586771325723 0.00699028892260123 0.00756908507133058 0.00681741476784126 0.00730392346258313 0.00759638639712479 0.00752412969382388 0.00764564777251664 0.00775157333609344 0.00690760370063037 0.00814064753598831 0.00750931943198818 0.00790429807145721 0.00802777512491559 0.00721714958057229 0.00875619466066302 0.00707962565955977 0.00819589991809899 0.00807851106840829 0.00845374368593688 0.00784602102961041 0.00878798810263559 0.00829479524981125 0.00824971234065708 0.00867668390167165 0.00782022299379603 0.00955190727660127 0.00848220339703376 0.00888881517016449 0.00828300215371258 0.00961924770050704 0.00868897299837723];
        % Calculating value
        tMeans = mean(dataM)-mean(dataC);
        tCov = (cov(dataM)+cov(dataC))./2;
        dist = sqrt(tMeans/tCov*tMeans')/2-sum(offset(1:nD-1));
    case 'Kullback-Leibler'                         
        % Not found very usefull
        tMeans = mean(dataM)-mean(dataC);
        dist = (trace(cov(dataC)\cov(dataM))+tMeans/cov(dataC)*tMeans'-length(dataM(1,:)+log(det(cov(dataC))/det(cov(dataM)))))/2;
    case 'Hellinger'                                
        % Shown to be highly correlated with MLP accuracy.
        % Not compensated for dimenesional dependency.
        % Usefull when comparing data with equal dimensionality.
        tCov = (cov(dataM)+cov(dataC))./2;
        tMeans = mean(dataM)-mean(dataC);
        dist = 1-det(cov(dataM))^(1/4)*det(cov(dataC))^(1/4)/(det(tCov)^(1/2))*exp(-(tMeans/tCov*tMeans')/8);
    case 'Mahalanobis'
        tMeans = mean(dataM)-mean(dataC);
        dist = sqrt(tMeans/cov(dataM)*tMeans')/2;
    case 'Mutual Information'
         dist = log((2*pi*exp(1))^nD*det(cov(dataM)))/2 + log((2*pi*exp(1))^nD*det(cov(dataC)))/2 - log((2*pi*exp(1))^(nD*2)*det(cov([dataM dataC])))/2;
end